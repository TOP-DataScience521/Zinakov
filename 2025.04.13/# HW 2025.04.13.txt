ПРОДВИНУТАЯ РАБОТА С ФУНКЦИЯМИ

  ==========  1  ==========  

Написать рекурсивную функцию с именем tree_leaves, которая считает количество листьев на дереве.

Функция принимает обязательным позиционно-ключевым аргументом список веток дерева.
    
    Роль листа будет играть строка 'leaf'.
    Каждая ветка дерева может содержать вложенные ветки и листья. То есть элементами исходного списка могут быть строки (листья) и списки (ветки), которые в свою очередь могут содержать как листья, так и строки (см. пример проверки).
    
    Поскольку речь идёт о произвольной структуре данных, то в аннотации параметра функции тип элементов не указывается.

Функция возвращает объект int.

Работу написанной функции необходимо проверить.

Пример проверки:
    >>> tree = [[[['leaf', 'leaf', 'leaf', 'leaf'], 'leaf', 'leaf', 'leaf'], [['leaf', 'leaf'], 'leaf', 'leaf'], ['leaf', 'leaf', 'leaf']], [['leaf', 'leaf'], ['leaf', 'leaf', 'leaf', 'leaf', 'leaf', 'leaf'], 'leaf', 'leaf', 'leaf'], [['leaf'], ['leaf', 'leaf', ['leaf', 'leaf', 'leaf']], 'leaf', 'leaf'], ['leaf', 'leaf', ['leaf', 'leaf'], 'leaf']]
    >>> 
    >>> tree_leaves(tree)
    38



  ==========  2  ==========  

Написать генераторную функцию с именем deck, которая создаёт упорядоченную колоду карт.

Функция не принимает аргументы.

Функция возвращает объект генератор.
    
    На каждой итерации или при явном вызове специального метода __next__() генератор должен возвращать кортеж из двух элементов:
        - целое число, обозначающее номинал карты: 2, 3 ... 10, 11 — валет, 12 — дама, 13 — король, 14 — туз
        - строка, обозначающая масть карты: 'черви', 'бубны', 'пики', 'трефы'

Колода упорядочивается следующим образом: сначала все номиналы червей, затем все номиналы бубен, затем все номиналы пик и в конце все номиналы треф.

Написанную функцию необходимо протестировать вручную.
Пример ручного теста:
    >>> list(deck())[::13]
    [(2, 'черви'), (2, 'бубны'), (2, 'пики'), (2, 'трефы')]



  ==========  3  ==========  дополнительно

Написать рекурсивную функцию с именем tree_generator, которая генерирует дерево с произвольным количеством веток и листьев.

Вложенность веток также должна быть произвольной.

Функция не принимает аргументы.
    
    Роль листа должна играть строка 'leaf'.

Функция возвращает объект list.
    
    Добейтесь такого поведения, чтобы возвращаемый список не мог быть пустым, но вложенные списки (ветки) могли.

Примечание: используйте функцию randrange() из модуля random стандартной библиотеки.

Работу написанной функции необходимо проверить.

Пример проверки:
    >>> tree_generator()
    [[], ['leaf'], [[[[]], [['leaf'], [['leaf', 'leaf', 'leaf']], ['leaf']], [[]], ['leaf']], ['leaf', 'leaf']], [[[]], [[], [[['leaf']], [['leaf', 'leaf']], ['leaf'], [['leaf', 'leaf', 'leaf'], [[], ['leaf', 'leaf', 'leaf'], [[['leaf', 'leaf', 'leaf'], [], [[], ['leaf']], ['leaf', 'leaf', 'leaf']], ['leaf', 'leaf', 'leaf'], [['leaf']], []], ['leaf']], ['leaf'], ['leaf'], []]], [['leaf'], ['leaf', 'leaf', 'leaf']], ['leaf', 'leaf']], ['leaf', 'leaf', 'leaf']], ['leaf']]
    >>>
    >>> tree_generator()
    [[[['leaf']]], []]



  ==========  4  ==========  дополнительно

Написать декоратор с именем logger, который в стандартном потоке вывода ведёт журнал вызовов декорируемой функции.

В журнал необходимо внести имя вызванной функции и перечислить переданные аргументы. Ключевые аргументы должны быть перечислены с указанием ключа — имени параметра, в который эти аргументы передаются. 

Помимо переданных аргументов в журнал необходимо внести использованные значения по умолчанию.
    
    Значения по умолчанию доступны в специальных атрибутах объекта функции __defaults__ (позиционные) и __kwdefaults__ (ключевые)
    
    Количество объявленных в функции строго позиционных и позиционно-ключевых параметров доступно в атрибуте функции __code__.co_argcount

В случае возникновения исключения его имя и текст также должны быть внесены в журнал, само исключение при перехвате игнорируется.
    
    Перехват любого исключения (в данном случае требуется перехватывать именно любое исключение, потому что декоратор может быть применён к произвольной функции) возможен при использовании базового класса Exception:
    try:
        int('a')
    except Exception:
        pass
    
    Доступ к объекту исключения возможен при использовании конструкции as <переменная>:
    try:
        sorted(150)
    except TypeError as exception:
        print(exception)
    
    Имя объекта исключения доступно во встроенном атрибуте __name__. Текст исключения (без обратной трассировки) возвращается при получении строкового представления объекта исключения. 
    В примере выше в stdout будет выведено: 'int' object is not iterable.

Декоратор может применяться к функциям с различным набором позиционных и ключевых аргументов.

Написанный декоратор необходимо протестировать вручную с помощью различных дополнительных произвольных функций.
Пример ручного теста:
    >>> def div_round(num1, num2, *, digits=0):
    ...     return round(num1 / num2, digits)
    ...
    >>> div_round = logger(div_round)
    >>> 
    >>> 
    >>> div_round(1, 3, digits=2)
    div_round(1, 3, digits=2) -> 0.33
    0.33
    >>> div_round(7, 2)
    div_round(7, 2, digits=0) -> 4.0
    4.0
    >>> div_round(5, 0)
    div_round(5, 0, digits=0) .. ZeroDivisionError: division by zero
    >>> 



  =========================  

Каждая функция должна быть документирована, её параметры и возвращаемое значение должны быть аннотированы.

Работа функций проверяется в режиме инспекции файла с кодом.
Ввод и вывод в стандартные потоки результатов проверки копируются.
Копия в виде комментария помещается в конец файла с кодом задачи.

Невыполнение дополнительных задач не повлечёт снижения баллов за задание. Тем не менее они настоятельно рекомендуются к решению.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Регулярно получайте обновления в свой локальный репозиторий из удалённого репозитория.