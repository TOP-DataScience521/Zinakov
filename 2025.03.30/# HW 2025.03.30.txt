СТРОКИ, СПИСКИ, СЛОВАРИ, МНОЖЕСТВА

  ==========  1  ==========  

Написать программу, которая проверяет корректность введённого адреса электронной почты.

Программа получает из стандартного потока ввода (stdin) строку, содержащую адрес электронной почты. 
Программа выводит в stdout текстовый ответ.

Для забегающих вперёд: да, такие задачи обычно решаются с помощью регулярных выражений. Но в этой задаче вам необходимо использовать строковые методы:
    https://docs.python.org/3/library/stdtypes.html#string-methods

Примечание: в корректном e-mail обязательно есть цифробуквенная последовательность, затем символ '@', затем цифробуквенная последовательность, затем символ '.', а затем буквенное имя домена верхнего уровня.
    Допустимые имена доменов верхнего уровня приведены в файле 1.py

Примечание 2: цифробуквенными символами в данном случае считаем
  - буквенные символы всех языков (по UTF-8), а также символы, кодирующие лексемы, включая знаки иных видов письменности (иероглифы, арабская вязь, ...)
  - символы, кодирующие цифры (арабские, китайские, ...)
  - символы '_', '.'

Пример ввода 1:
    sgd@ya.ru

Пример вывода 1:
    да

Пример ввода 2:
    abcde@fghij

Пример вывода 2:
    нет



  ==========  2  ==========  

Написать программу, которая генерирует форматированную строку.

Программа в цикле получает из stdin названия фруктов (цикл прерывается при вводе пустой строки).
Программа выводит в stdout строку с перечислением всех фруктов, добавляя перед последним фруктом союз "и", а перед предыдущими (при их наличии) фруктами добавляя запятые (см. примеры вывода).

Примечание: идеальным упражнением станет две реализации
  - получение данных и формирование выходной строки внутри одного цикла
  - получение данных в одном цикле, затем формирование выходной строки с помощью строковых методов

Пример ввода 1:
    яблоко

Пример вывода 1:
    яблоко

Пример ввода 2:
    яблоко
    груша

Пример вывода 2:
    яблоко и груша

Пример ввода 3:
    яблоко
    груша
    апельсин

Пример вывода 3:
    яблоко, груша и апельсин

Пример ввода 4:
    яблоко
    груша
    апельсин
    лимон

Пример вывода 4:
    яблоко, груша, апельсин и лимон



  ==========  3  ==========

Написать программу, которая сравнивает две клетки шахматной доски.

Программа должна по очереди получить из stdin координаты двух клеток шахматной доски (см. пример ввода).
    По горизонтали клетка кодируется латинскими буквами от ‘a’ до ‘h’.
    По вертикали клетка кодируется цифрами от 1 до 8.

Если две заданные клетки покрашены в один цвет, то программа должна вывести в stdout слово “да”. Если клетки покрашены в разные цвета, то должно быть выведено слово “нет”.

Примечание: в традиционных шахматах клетка а1 всегда чёрного цвета.

Пример ввода:
    a1
    b2

Пример вывода:
    да



  ==========  4  ==========

Написать программу, которая проверяет корректность хода шахматной ладьи.

Программа должна по очереди получить из stdin координаты двух клеток шахматной доски.

Программа должна вывести в stdout “да”, если из первой клетки можно попасть во вторую одним ходом ладьи. В противном случае должно быть выведено “нет”.

Примечание: шахматная ладья ходит по горизонтали или вертикали.

Пример ввода 1:
    d4
    e4

Пример вывода 1:
    да

Пример ввода 2:
    a2
    c4

Пример вывода 2:
    нет



  ==========  5  ==========

Написать программу, которая проверяет корректность хода шахматного короля.

Программа должна по очереди получить из stdin координаты двух клеток шахматной доски.

Программа должна вывести в stdout “да”, если из первой клетки можно попасть во вторую одним ходом короля. В противном случае должно быть выведено “нет”.

Примечание: шахматный король ходит по горизонтали, вертикали и диагонали, но только на 1 клетку.

Пример ввода 1:
    g3
    f2

Пример вывода 1:
    да

Пример ввода 2:
    c6
    d4

Пример вывода 2:
    нет



  ==========  6  ==========  

Написать программу, которая проверяет, является ли один список частью другого списка.

Программа два раза получает из stdin произвольное количество целых чисел, разделённых пробелом. Из каждого ввода формируется отдельный список объектов int.

Далее, программа определяет, можно ли из первого списка выбрать срез с шагом по умолчанию (единица) так, чтобы получился второй список.
    В решении не обязательно использовать именно срезы, есть много разных способов.

Программа выводит в stdout текстовый ответ.

Примечание: пустой список является частью любого списка, включая пустой.

Пример ввода 1:
    1 2 3 4
    1 2

Пример вывода 1:
    да

Пример ввода 2:
    1 2 3 4
    2 4

Пример вывода 2:
    нет



  ==========  7  ==========  

Написать программу, которая подсчитывает количество очков за слово в настольной игре "Эрудит".

Программа получает из stdin строку, содержащую одно слово на русском языке.

Используя заранее составленный словарь программа вычисляет количество очков, которое должно быть начислено за введённое слово.
    Воспользуйтесь словарём из приложенного к заданию файла 7.py

Программа выводит в stdout число.

Подумайте о способах оптимизации программы.

Примечание: согласно правилам большинства версий "Эрудита" буквы 'е' и 'ё' взаимозаменяемы.

Пример ввода:
    синхрофазотрон

Пример вывода:
    29



  ==========  8  ==========  

Написать программу, которая определяет представляет ли строка двоичное число.

Программа получает из stdin строку, содержащую один из нескольких возможных форматов строкового представления двоичного числа: без префикса, префикс 'b', префикс '0b'. 
Например:
    0101
    b11
    0b11001

Программа выводит в stdout текстовый ответ.

В этой задаче необходимо использовать множества.

Пример ввода:
    1b0101

Пример вывода:
    нет



  ==========  9  ==========  

Написать программу, которая объединяет словари без потери значений.

Эта задача довольно распространена в некоторых сценариях обработки данных.

Программа работает со списком словарей.
    Воспользуйтесь списком словарей из приложенного к заданию файла 9.py

Программа формирует объединённый словарь по следующим правилам:
    - все ключи из всех исходных словарей должны быть включены в результирующий словарь
    - значениями в результирующем словаре становятся множества
    - значения, соответствующие одним и тем же ключам в исходных словарях, добавляются в одно множество, соответствующее такому же ключу в результирующем словаре

Программа выводит в stdout пары ключ: значение результирующего словаря по одной паре на строке.

Пример вывода:
    'Барнаул': {5},
    'Краснодар': {9, 4},
    'Красноярск': {9, 1},
    'Липецк': {1},
    'Махачкала': {5},
    'Москва': {1},
    'Новосибирск': {7},
    'Пермь': {9, 3},
    'Ростов-на-Дону': {5, 6},
    'Самара': {2},
    'Санкт-Петербург': {4, 6},
    'Тольятти': {9},
    'Тула': {2, 3},
    'Тюмень': {5},
    'Ульяновск': {4, 7},
    'Хабаровск': {7},
    'Ярославль': {9}



  ==========  10  =========  дополнительно  

Написать программу, которая переименовывает дублирующиеся файлы.

Это задача, которую решает каждая операционная система при поптыке размещения одноимённых файлов в одном каталоге.

Программа получает из stdin строку, содержащую имена файлов, разделённые точкой с запятой и символом пробела (см. пример ввода).

Далее программа генерирует новые имена для повторяющихся файлов.
    
    Первый из одноимённых файл остаётся со своим исходным именем.
    Начиная со второго из одноимённых файла программа добавляет в имя файла перед расширением постфикс "_n", где n — количество раз, сколько такое имя файла уже встречалось.

Программа выводит в stdout отсортированные по алфавиту новые имена файлов, каждое имя на отдельной строке (см. пример вывода).

Примечание 1: расширение файла является частью имени, таким образом файлы a.txt и a.py не являются одноимёнными и могут без конфликта находиться в одном каталоге.

Примечание 2: расширения бывают составными, например .tar.gz

Пример ввода:
    1.py; 1.py; src.tar.gz; aux.h; main.cpp; functions.h; main.cpp; 1.py; main.cpp; src.tar.gz

Пример вывода:
    1.py
    1_2.py
    1_3.py
    aux.h
    functions.h
    main.cpp
    main_2.cpp
    main.py
    src.tar.gz
    src_2.tar.gz



  =========================  

Все файлы должны быть выполнены с помощью интерпретатора.
Текстовый ввод и вывод программы в стандартные потоки копируются.
Копия в виде комментария помещается в конец файла с кодом задачи.

Невыполнение дополнительных задач не повлечёт снижения баллов за задание. Тем не менее, они настоятельно рекомендуются к решению.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Регулярно получайте обновления в свой локальный репозиторий из удалённого репозитория.